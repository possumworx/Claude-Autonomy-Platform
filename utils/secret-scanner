#!/bin/bash
# secret-scanner - Scan files for potential secrets and credentials
# Part of ClAP v0.5 safety improvements

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Default operation
OPERATION="check"
FILES=()
VERBOSE=false

# Secret patterns to check for
SECRET_PATTERNS=(
    # OAuth and client secrets
    "oauth_client_secret"
    "client_secret"
    "client_id.*secret"
    
    # API keys and tokens
    "api[_-]?key"
    "api[_-]?secret"
    "access[_-]?token"
    "auth[_-]?token"
    "discord.*token"
    "bot[_-]?token"
    
    # Passwords and private keys
    "password"
    "passwd"
    "private[_-]?key"
    "priv[_-]?key"
    "secret[_-]?key"
    
    # AWS specific
    "aws[_-]?access[_-]?key"
    "aws[_-]?secret"
    
    # Database credentials
    "db[_-]?password"
    "database[_-]?password"
    "mysql[_-]?password"
    "postgres[_-]?password"
    
    # Other sensitive data
    "encryption[_-]?key"
    "ssh[_-]?key"
    "rsa[_-]?key"
)

# Function to show usage
usage() {
    echo "Usage: $0 [check|scan] [options] [files...]"
    echo ""
    echo "Operations:"
    echo "  check    Check specified files for secrets (default)"
    echo "  scan     Scan entire directory recursively"
    echo ""
    echo "Options:"
    echo "  -v, --verbose    Show all matches, not just summary"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 check config.txt"
    echo "  $0 scan"
    echo "  $0 check -v *.json"
}

# Function to check a single file
check_file() {
    local file="$1"
    local found=false
    local matches=()
    
    if [[ ! -f "$file" ]]; then
        return 0
    fi
    
    # Skip binary files
    if file "$file" | grep -q "binary"; then
        return 0
    fi
    
    # Check each pattern
    for pattern in "${SECRET_PATTERNS[@]}"; do
        local results=$(grep -inE "$pattern" "$file" 2>/dev/null || true)
        if [[ -n "$results" ]]; then
            found=true
            matches+=("$results")
        fi
    done
    
    if $found; then
        echo -e "${RED}⚠️  Potential secrets found in: $file${NC}"
        if $VERBOSE; then
            for match in "${matches[@]}"; do
                echo -e "${YELLOW}$match${NC}"
            done
            echo ""
        fi
        return 1
    fi
    
    return 0
}

# Parse command line arguments
if [[ $# -eq 0 ]]; then
    usage
    exit 1
fi

# First argument might be operation
case "$1" in
    check|scan)
        OPERATION="$1"
        shift
        ;;
    -h|--help)
        usage
        exit 0
        ;;
esac

# Parse remaining arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            FILES+=("$1")
            shift
            ;;
    esac
done

# Execute based on operation
case "$OPERATION" in
    check)
        if [[ ${#FILES[@]} -eq 0 ]]; then
            echo "Error: No files specified for check operation"
            usage
            exit 1
        fi
        
        echo "🔍 Scanning ${#FILES[@]} file(s) for potential secrets..."
        
        FOUND_SECRETS=false
        for file in "${FILES[@]}"; do
            if ! check_file "$file"; then
                FOUND_SECRETS=true
            fi
        done
        
        if $FOUND_SECRETS; then
            echo -e "${RED}❌ Potential secrets detected!${NC}"
            echo "Please remove sensitive data before committing."
            exit 1
        else
            echo -e "${GREEN}✅ No secrets detected${NC}"
            exit 0
        fi
        ;;
        
    scan)
        echo "🔍 Scanning directory recursively for potential secrets..."
        
        # Find all text files, excluding .git directory
        FILES=$(find . -type f -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./venv/*" 2>/dev/null)
        
        FOUND_SECRETS=false
        FILE_COUNT=0
        
        while IFS= read -r file; do
            ((FILE_COUNT++))
            if ! check_file "$file"; then
                FOUND_SECRETS=true
            fi
        done <<< "$FILES"
        
        echo ""
        echo "Scanned $FILE_COUNT files"
        
        if $FOUND_SECRETS; then
            echo -e "${RED}❌ Potential secrets detected!${NC}"
            exit 1
        else
            echo -e "${GREEN}✅ No secrets detected${NC}"
            exit 0
        fi
        ;;
esac
